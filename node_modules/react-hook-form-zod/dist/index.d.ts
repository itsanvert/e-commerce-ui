import { zodResolver } from "@hookform/resolvers/zod";
import { UseFormProps as UseReactHookFormProps } from "react-hook-form";
import { z } from "zod";
export * from "react-hook-form";
export type UseFormProps<TSchema extends z.ZodSchema, TContext = any> = Omit<UseReactHookFormProps<z.infer<TSchema>, TContext>, "resolver"> & {
    schema: TSchema;
    schemaOptions?: Parameters<typeof zodResolver>[1];
    factoryOptions?: Parameters<typeof zodResolver>[2];
};
export declare function useForm<TSchema extends z.ZodSchema, TContext = any, TTransformedValues extends TSchema | undefined = undefined>({ schema, schemaOptions, factoryOptions, ...rest }: UseFormProps<TSchema, TContext>): import("react-hook-form").UseFormReturn<z.TypeOf<TSchema>, TContext, TTransformedValues>;
//# sourceMappingURL=index.d.ts.map